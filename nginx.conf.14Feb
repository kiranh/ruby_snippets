#user  nobody;
worker_processes  5;

error_log  /var/log/nginx.log;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx_access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    tcp_nopush on; # off may be better for *some* Comet/long-poll stuff
    tcp_nodelay off; # on may be better for some Comet/long-poll stuff

    # we haven't checked to see if Rack::Deflate on the app server is
    # faster or not than doing compression via nginx.  It's easier
  # to configure it all in one place here for static files and also
  # to disable gzip for clients who don't get gzip/deflate right.
  # There are other other gzip settings that may be needed used to deal with
  # bad clients out there, see http://wiki.nginx.org/NginxHttpGzipModule
  gzip on;
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_disable "MSIE [1-6]\.";
  gzip_types text/plain text/xml text/css
             text/comma-separated-values
             text/javascript application/x-javascript
             application/atom+xml;


    upstream my_site {
     # fail_timeout=0 means we always retry an upstream even if it failed
     # to return a good HTTP response (in case the Unicorn master nukes a
     # single worker for timing out).
 
     #  for UNIX domain socket setups:
     server unix:/tmp/my_site.socket fail_timeout=0;
    }  


    # HTTPS server
    #
    server {
        listen       443;

        ssl                  on;
        ssl_certificate      /etc/ssl/certs/socialtango.crt;
        ssl_certificate_key  /etc/ssl/private/socialtango.key;

        ssl_session_timeout  5m;

        ssl_protocols  SSLv2 SSLv3 TLSv1;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers   on;
        
        root /home/S102405/tango/public;
        #passenger_enabled off;
        rails_env production;
        location / {
          # Add this to the location directive.
          proxy_set_header   X-Forwarded-Proto https;

          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;

          #all requests are sent to the UNIX socket
          proxy_pass  http://my_site;
          proxy_redirect     off;

          client_max_body_size       4G;
          client_body_buffer_size    128k;

          proxy_buffer_size          4k;
          proxy_buffers              4 32k;
          proxy_busy_buffers_size    64k;
          proxy_temp_file_write_size 64k;
   
        }
        # if the request is for a static resource, nginx should serve it directly
        # and add a far future expires header to it, making the browser
        # cache the resource and navigate faster over the website
        # this probably needs some work with Rails 3.1's asset pipe_line
        location ~ ^/(images|javascripts|stylesheets|system)/  {
          root /home/S102405/tango/public;
          expires max;
          break;
        }
        location ~* \.(ico|css|js|gif|jpe?g|png)(\?[0-9]+)?$ {
         expires max;
         break;
       }
        location = /robots.txt {
          root /home/S102405/tango/public;
        }
    }

}
